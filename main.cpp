#include <stdio.h>

typedef enum
{
    EMPTY = -1,
    I,
    J,
    L,
    O,
    S,
    T,
    Z
} ShapeId;

typedef enum
{
    RED = 41,
    GREEN,
    YELLOW,
    BLUE,
    PURPLE,
    CYAN,
    WHITE,
    BLACK = 0,
} Color;

typedef struct
{
    ShapeId shape;
    Color color;
    int size;
    char rotates[4][4][4]; // [rotation][row][col]
} Shape;

// 定義所有7種方塊的初始形狀（僅定義第一種旋轉，其餘可自行補完）
Shape shapes[] = {
    // I 型方塊
    {I, CYAN, 4, {
        { {0,0,0,0}, {1,1,1,1}, {0,0,0,0}, {0,0,0,0} }, // 0°
        { {0,0,1,0}, {0,0,1,0}, {0,0,1,0}, {0,0,1,0} }, // 90°
        { {0,0,0,0}, {0,0,0,0}, {1,1,1,1}, {0,0,0,0} }, // 180°
        { {0,1,0,0}, {0,1,0,0}, {0,1,0,0}, {0,1,0,0} }  // 270°
    }},
    // J 型方塊
    {J, BLUE, 3, {
        { {1,0,0}, {1,1,1}, {0,0,0} }, // 0°
        { {0,1,1}, {0,1,0}, {0,1,0} }, // 90°
        { {0,0,0}, {1,1,1}, {0,0,1} }, // 180°
        { {0,1,0}, {0,1,0}, {1,1,0} }  // 270°
    }},
    // L 型方塊
    {L, YELLOW, 3, {
        { {0,0,1}, {1,1,1}, {0,0,0} }, // 0°
        { {0,1,0}, {0,1,0}, {0,1,1} }, // 90°
        { {0,0,0}, {1,1,1}, {1,0,0} }, // 180°
        { {1,1,0}, {0,1,0}, {0,1,0} }  // 270°
    }},
    // O 型方塊（正方形，旋轉不變）
    {O, WHITE, 2, {
        { {1,1}, {1,1} }, // 0°
        { {1,1}, {1,1} }, // 90°
        { {1,1}, {1,1} }, // 180°
        { {1,1}, {1,1} }  // 270°
    }},
    // S 型方塊
    {S, GREEN, 3, {
        { {0,1,1}, {1,1,0}, {0,0,0} }, // 0°
        { {0,1,0}, {0,1,1}, {0,0,1} }, // 90°
        { {0,0,0}, {0,1,1}, {1,1,0} }, // 180°
        { {1,0,0}, {1,1,0}, {0,1,0} }  // 270°
    }},
    // T 型方塊
    {T, PURPLE, 3, {
        { {0,1,0}, {1,1,1}, {0,0,0} }, // 0°
        { {0,1,0}, {0,1,1}, {0,1,0} }, // 90°
        { {0,0,0}, {1,1,1}, {0,1,0} }, // 180°
        { {0,1,0}, {1,1,0}, {0,1,0} }  // 270°
    }},
    // Z 型方塊
    {Z, RED, 3, {
        { {1,1,0}, {0,1,1}, {0,0,0} }, // 0°
        { {0,0,1}, {0,1,1}, {0,1,0} }, // 90°
        { {0,0,0}, {1,1,0}, {0,1,1} }, // 180°
        { {0,1,0}, {1,1,0}, {1,0,0} }  // 270°
    }}
};


// 顯示一個方塊的形狀
void printShape(Shape shape) {
    printf("Shape ID: %d, Color: %d, Size: %d\n", shape.shape, shape.color, shape.size);
    for (int i = 0; i < shape.size; i++) {
        for (int j = 0; j < shape.size; j++) {
            if (shape.rotates[0][i][j]) {
                printf("\033[%dm  \033[0m", shape.color); // 使用背景色來顯示方塊
            }
            else {
                printf("  ");
            }
        }
        printf("\n");
    }
    printf("\n");
}

int main() {
    int count = sizeof(shapes) / sizeof(shapes[0]);
    for (int i = 0; i < count; i++) {
        printShape(shapes[i]);
    }
    return 0;
}
